import os
from flask import Flask, session, request, redirect, send_from_directory, render_template
from flask_session import Session
import spotipy
import uuid
from helpers import *

app = Flask(__name__)
app.config['SECRET_KEY'] = os.urandom(64)
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_FILE_DIR'] = './.flask_session/'
Session(app)

SPOTIPY_REDIRECT_URI="http://127.0.0.1:8080"

caches_folder = './.spotify_caches/'
if not os.path.exists(caches_folder):
    os.makedirs(caches_folder)


def session_cache_path():
    return caches_folder + session.get('uuid')


@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'), 'favicon.ico')


@app.route('/', methods=['GET', 'POST'])
def index():

    if not session.get('uuid'):
        # Step 1. Visitor is unknown, give random ID
        session['uuid'] = str(uuid.uuid4())

    cache_handler = spotipy.cache_handler.CacheFileHandler(
        cache_path=session_cache_path())
    auth_manager = spotipy.oauth2.SpotifyOAuth(scope='playlist-modify-public playlist-modify-private',
                                               cache_handler=cache_handler,
                                               show_dialog=True)
    if request.args.get("code"):
        # Step 3. Being redirected from Spotify auth page
        auth_manager.get_access_token(request.args.get("code"))
        return redirect('/')

    if not auth_manager.validate_token(cache_handler.get_cached_token()):
        # Step 2. Display sign in link when no token
        auth_url = auth_manager.get_authorize_url()
        return render_template("login.html", auth_url=auth_url)

    if request.method == 'POST':
        if request.form.get('playlist_year'):
            playlist_year = request.form.get('playlist_year')
            return playlist_year

        if request.form.get('year'):
            year = request.form.get('year')
            database = get_tracklist_year(year)
            spotify = spotipy.Spotify(auth_manager=auth_manager)
            display_name = spotify.me()["display_name"]
            number_of_years = get_number_of_years()
            return render_template("index.html", database=database, display_name=display_name, number_of_years=number_of_years, year=year)

    # Step 4. Signed in, display data
    spotify = spotipy.Spotify(auth_manager=auth_manager)
    number_of_years = get_number_of_years()
    return render_template("index.html", display_name=spotify.me()["display_name"], number_of_years=number_of_years)


@app.route('/sign_out')
def sign_out():
    try:
        # Remove the CACHE file (.cache-test) so that a new user can authorize.
        os.remove(session_cache_path())
        session.clear()
    except OSError as e:
        print("Error: %s - %s." % (e.filename, e.strerror))
    return redirect('/')


@app.route('/create_playlist', methods = ['GET', 'POST'])
def create_playlist():
    playlist_exist = False

    if request.method == 'POST':
        cache_handler = spotipy.cache_handler.CacheFileHandler(
            cache_path=session_cache_path())
        auth_manager = spotipy.oauth2.SpotifyOAuth(cache_handler=cache_handler)
        if not auth_manager.validate_token(cache_handler.get_cached_token()):
            return redirect('/')

        spotify = spotipy.Spotify(auth_manager=auth_manager)
        year = request.form.get('year')
        new_playlist_name = f"{year} Pitchfork best new tracks"
        description = "Generated by Spotifork"

        database = db.execute('SELECT * FROM tracklist WHERE year = ?', year)

        # Check if playlist with same name already exist.
        # Adding tracks into existing playlist in this case.
        new_track_list = []
        playlists = spotify.current_user_playlists()
        while playlists:
            for playlist in playlists['items']:
                if playlist['name'] == new_playlist_name:
                    playlist_exist = True
                    playlist_id = playlist['id']
                    playlist_items = spotify.playlist_items(playlist_id)
                    playlist_items_list = [item["track"]["id"] for item in playlist_items["items"]]                    
                    for track in database:
                        if track["uri"]:
                            if track["uri"] not in playlist_items_list:
                                new_track_list.append(track["uri"])
            
            if playlists['next']:
                playlists = spotify.next(playlists)
            else:
                playlists = None
        
        if playlist_exist:
            if new_track_list:
                # return str(new_track_list)
                spotify.playlist_add_items(playlist_id, new_track_list)
                new_track_list.clear()
                return redirect('/')
            else:
                return redirect('/')
        
        # If playlist doesn't exist create one.
        try:
            new_playlist = spotify.user_playlist_create(
                spotify.current_user()["id"], 
                name=new_playlist_name, 
                description=description)
            
            for item in database:
                if item["uri"]:
                    new_track_list.append(item["uri"])

            new_playlist_id = new_playlist["id"]

            for group in (new_track_list[pos:pos + 100] for pos in range(0, len(new_track_list), 100)):
                spotify.playlist_add_items(new_playlist_id, group)

            new_track_list.clear()
            return redirect('/')
        except Exception:
            return redirect('/')

if __name__ == '__main__':
    app.run(debug=True, threaded=True, port=int(os.environ.get(
        "PORT", os.environ.get("SPOTIPY_REDIRECT_URI", 8080).split(":")[-1])))




